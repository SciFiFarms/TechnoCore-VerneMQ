version: "3.5"

networks:
  mqtt:

volumes:
  mqtt:
  mqtt_data:

secrets:
  # Secrets format
  # ${service_name}_${mount_point}:
  #   name: ${STACK_NAME:-technocore}_${service_name}_${mount_point}
  # #   external: true
  vernemq_admin_password:
    name: ${STACK_NAME:-technocore}_vernemq_admin_password
    external: true
  create_secrets_mqtt_password:
    name: ${STACK_NAME:-technocore}_create_secrets_mqtt_password
    external: true
  mqtt_create_secrets_password:
    name: ${STACK_NAME:-technocore}_mqtt_create_secrets_password
    external: true

services:
  ingress:
    networks:
      - mqtt

  mqtt:
    deploy:
      labels:
        #- traefik.frontend.rule=$MQTT_ROUTING_LABEL
        #- traefik.frontend.priority=$MQTT_ROUTING_LABEL_PRIORITY
        #- traefik.port=1883
        #- traefik.enable=true
        ## You'll need to set applicaiton's port here.
        #- traefik.tags=ingress
        #- traefik.docker.network=${STACK_NAME:-technocore}_mqtt
        ## Traefik service that listens to HTTP
        ##- traefik.redirectorservice.frontend.entryPoints=http
        ##- traefik.redirectorservice.frontend.redirect.entryPoint=https
        ## Traefik service that listens to HTTPS
        #- traefik.webservice.frontend.entryPoints=mqtt
        - com.ouroboros.enable=true
        # For Traefik 2.0
        #- "traefik.tcp.routers.mqtt.rule=HostSNI(`*`)"
        ### This will only work if we change Host => HostSNI and if the connection is TLS.
        ##- "traefik.tcp.routers.mqtt.rule=$VERNEMQ_ROUTING_LABEL"
        ##- "traefik.tcp.routers.mqtt.priority=$VERNEMQ_ROUTING_LABEL_PRIORITY"
        #- "traefik.tcp.routers.mqtt.entrypoints=mqtt"
        #- "traefik.tcp.routers.mqtt.service=mqtt"
        ##- "traefik.http.routers.api.tls"
        #- traefik.tcp.services.mqtt.loadbalancer.server.port=1883
        #- traefik.enable=true
        ##- traefik.tags=ingress
        ##- traefik.docker.network=${STACK_NAME:-technocore}_ingress
      mode: global
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
      # Big services will need this modified or removed.
      #resources:
      #  limits:
      #    memory: 128M
      #  reservations:
      #    memory: 64M
    environment:
      # Sometimes you have to pass in ${DOMAIN} to enable the correct link paths to be generated.
      # Othertimes you can use http:// or https:// for the website. Weird trick.
      - ADMIN_USER=${ADMIN_USER}
      - DOCKER_VERNEMQ_ACCEPT_EULA=yes

    image: ${image_provider:-scififarms}/technocore-vernemq:${TAG:-latest}
    logging:
      driver: "${LOGGING_DRIVER}"
      options:
        tag: "{{.Name}}"
    networks:
      mqtt:
        #aliases:
          # Might need to be mqtt.local. It's how prometheus reaching vernemq.
          #- mqtt.local
    ports:
      - 1883:1883
      #- 8080:8080
    secrets:
      - source: vernemq_admin_password
        target: admin_password
      - source: mqtt_create_secrets_password
        target: users/create_secrets
    volumes:
      - mqtt:/vernemq/etc
      - mqtt_data:/vernemq/data

  create_secrets:
    command: /usr/local/bin/sidecars/create-secret.sub
    deploy:
      labels:
        - com.ouroboros.enable=true
      mode: global
      restart_policy:
        condition: any
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    environment:
      - STACK_NAME=$STACK_NAME
      - MQTT_USERNAME=create_secrets
    image: ${image_provider:-scififarms}/technocore:${TAG:-latest}
    logging:
      driver: "${LOGGING_DRIVER}"
      options:
        tag: "{{.Name}}"
    networks:
      - mqtt
    secrets:
      - source: create_secrets_mqtt_password
        target: mqtt_password
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
